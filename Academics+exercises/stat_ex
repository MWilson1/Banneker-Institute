#!/usr/bin/env python

import numpy as np
import matplotlib.pyplot as plt
#import numpy.random as rand
from pylab import *
import numpy.random as rand  # this must come after pylab!
from matplotlib import rc
#from scipy.stats import linregress

plt.ion()

x_vals = np.array([1, 2, 3, 4, 5], dtype=float)
a_0 = np.linspace(0,4,30)
a_1 = np.linspace(0,2,30)
a_vals = np.array([a_0, a_1])

#a_1st_set = np.array([1,2])
#a_vals = np.array([1,2])

sigmas = np.ones(len(x_vals))*0.5
log_L = np.ones((len(a_vals[0]),  len(a_vals[1])))

row = -1.0


def linefit(d_vals, sigmas, row):
    for j in a_vals[1]:
        row += 1.0
        col = -1.0
        for i in a_vals[0]:
            col += 1.0
            #for x_i in xrange(len(x_vals)):
            a_set = np.array([i, j])

            #print(str(row)+'  '+str(col))
            mu_vals = a_set[0] + a_set[1]*x_vals
            chi_sq = np.sum(((d_vals - mu_vals)/sigmas)**2)
            log_L[row][col] = -(1.0/2.0)*np.sum(np.log(2*np.pi*sigmas**2)) - (1.0/2.0)*chi_sq
    #print(log_L)
    return log_L

def poly(x_vals, a_vals, sigmas, plot=False):
    a_1st_set = np.array([1,2])
    d_vals = np.poly1d(a_1st_set)(x_vals) + sigmas*rand.randn(len(x_vals))

    Likel = np.exp(linefit(d_vals, sigmas, row))

    x_Likel = np.sum(Likel, axis=0)
    y_Likel = np.sum(Likel, axis=1)
    
    '''
    x_mat = np.resize(x_vals*1.0,(len(a_vals),len(x_vals)))
    power_mat = np.resize(np.arange(len(a_vals))*1.0, (len(x_vals), len(a_vals))).T
    a_mat = np.resize(a_vals*1.0,(len(x_vals),len(a_vals))).T
    mats= x_mat**power_mat*a_mat
    y_vals = np.sum(mats, axis=0) + sigma*rand.randn(len(x_vals))
    '''
    
    #x_a = x_mat.dot(a_mat)  # we are not doing matrix multiplication in this exercise    
    #y_vals = np.poly1d(a_vals)(x_vals) + sigma*rand.randn(len(x_vals))
    #coeffs = np.polyfit(x_vals, y_vals, len(a_vals)-1)
    #y_vals = np.poly1d(coeffs)(x_vals) + sigma*rand.randn(len(x_vals))
    #stats=np.linregress(x_vals, y_vals)
    #uncert = rand.random(len(x_vals))*7
    if plot:
        
        fig1 = plt.figure(1)
        plt.clf()
        plt.scatter(x_vals, d_vals)
        #plt.plot(x_vals, mu_vals)
        #plt.plot(x_vals, np.poly1d(a_1st_set)(x_vals))
        plt.xlabel(r'x_vals')
        plt.ylabel(r'd_vals')
        
        fig2 = plt.figure(2)
        plt.clf()
        x_coords, y_coords = meshgrid(a_vals[1], a_vals[0])
        con_plot = contour(x_coords, y_coords, Likel)
        clabel(con_plot, inline=True, fontsize=10)

        fig3 = plt.figure(3)
        plt.clf()
        plt.plot(a_vals[0], x_Likel)
        plt.title('1D gaussian distribution from 2D Likelihood matrix')
        plt.xlabel(r'A$_0$ sums ')
        plt.ylabel(r'Values of Likelihood')

        fig4 = plt.figure(4)
        plt.clf()
        plt.plot(a_vals[1], y_Likel)
        plt.title('1D gaussian distribution from 2D Likelihood matrix')
        plt.xlabel(r'A$_1$ sums ')
        plt.ylabel(r'Values of Likelihood')
        #plt.limit

        
        #!plt.scatter(x_vals, d_vals)
        #plt.plot(x_vals, np.poly1d(np.fliplr([a_vals])[0])(x_vals))
        #!plt.plot(x_vals, mu_vals)
        #plt.errorbar(x_vals, y_vals, yerr = uncert, fmt='s', linewidth= 1.5)
        plt.show()
    return Likel


def poly1st(x_vals, a_values, plot=False, sigma=0):
    
    x_mat = np.resize(x_vals*1.0,(len(a_values),len(x_vals)))
    power_mat = np.resize(np.arange(len(a_values))*1.0, (len(x_vals), len(a_values))).T
    a_mat = np.resize(a_values*1.0,(len(x_vals),len(a_values))).T
    mats= x_mat**power_mat*a_mat
    y_vals = np.sum(mats, axis=0) + sigma*rand.randn(len(x_vals))

    model_y_vals = np.sum(mats, axis=0)

    if plot:
        fig1 = plt.figure(1)
        plt.clf()
        plt.scatter(x_vals, y_vals)
        #plt.plot(x_vals, mu_vals)
        plt.plot(x_vals, model_y_vals)
        #plt.plot(x_vals, np.poly1d(a_values)(x_vals))
